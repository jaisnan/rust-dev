name: Check PR Approvals

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'library/**'
      - 'doc/src/challenges/**'
  pull_request_review:
    types: [submitted, edited, dismissed]
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });

            const reviews = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number
            });

            const approvers = new Set(
              reviews.data
                .filter(review => review.state === 'APPROVED')
                .map(review => review.user.login)
            );

            console.log('PR Approvers:', Array.from(approvers));

            const requiredApprovals = 1;

            // Create or update check run
            const checkName = 'PR Approval Status';
            const conclusion = approvers.size >= requiredApprovals ? 'success' : 'failure';
            const output = {
              title: checkName,
              summary: `PR has ${approvers.size}/${requiredApprovals} required approvals.`,
              text: `Approvers: ${Array.from(approvers).join(', ')}`
            };

            // Get existing check run if it exists
            const checkRuns = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: pr.data.head.sha,
              check_name: checkName
            });

            if (checkRuns.data.total_count > 0) {
              // Update existing check run
              await github.rest.checks.update({
                owner,
                repo,
                check_run_id: checkRuns.data.check_runs[0].id,
                status: 'completed',
                conclusion,
                output
              });
            } else {
              // Create new check run
              await github.rest.checks.create({
                owner,
                repo,
                name: checkName,
                head_sha: pr.data.head.sha,
                status: 'completed',
                conclusion,
                output
              });
            }

            if (conclusion === 'failure') {
              core.setFailed(`PR needs at least ${requiredApprovals} approvals. Current approvals: ${approvers.size}`);
            }
